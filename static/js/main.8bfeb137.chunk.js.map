{"version":3,"sources":["assets/profile.png","EditableText.tsx","EditableImage.tsx","Message.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","onMount","el","focus","select","EditableText","props","value","className","onChange","disabled","React","useState","isEditing","setEditing","onClick","useCallback","onBlur","onInput","event","target","onSubmit","preventDefault","style","display","type","inputRef","EditableImage","alt","onChooseFile","file","files","URL","createObjectURL","src","Message","message","onRemove","onAppend","author","avatar","blankProfile","timestamp","content","generateId","Math","random","toString","substr","cloneMessage","id","initialMessage","format","Date","App","setDisabled","messages","setMessages","updateMessage","update","map","removeMessage","filter","m","appendMessage","concat","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8bfeb137.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.5a021ab9.png\";","import React from \"react\";\nimport AutosizeInput from \"react-input-autosize\";\n\nexport interface EditableTextProps {\n  value: string;\n  onChange: (value: string) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nconst onMount = (el: HTMLInputElement | null) => {\n  el?.focus();\n  el?.select();\n};\n\nexport const EditableText: React.FC<EditableTextProps> = (props) => {\n  const { value, className, onChange, disabled } = props;\n  const [isEditing, setEditing] = React.useState(false);\n\n  const onClick = React.useCallback(() => {\n    if (!disabled) setEditing(true);\n  }, [disabled]);\n\n  const onBlur = React.useCallback(() => setEditing(false), []);\n  const onInput = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(event.target.value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setEditing(false);\n    },\n    []\n  );\n\n  if (!isEditing) {\n    return (\n      <span onClick={onClick} className={className}>\n        {value}\n      </span>\n    );\n  }\n\n  return (\n    <form style={{ display: \"inline\" }} onSubmit={onSubmit}>\n      <AutosizeInput\n        type=\"text\"\n        value={value}\n        inputRef={onMount}\n        onChange={onInput}\n        onBlur={onBlur}\n      />\n    </form>\n  );\n};\n","import React from \"react\";\n\nexport interface EditableImageProps {\n  alt: string;\n  value: string;\n  onChange: (value: string) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport const EditableImage: React.FC<EditableImageProps> = (props) => {\n  const { value, alt, onChange, className, disabled } = props;\n\n  const onChooseFile = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files![0];\n      onChange(URL.createObjectURL(file));\n    },\n    [onChange]\n  );\n\n  return (\n    <label className={className}>\n      <img src={value} alt={alt} />\n      <input\n        type=\"file\"\n        disabled={disabled}\n        onChange={onChooseFile}\n        style={{ display: \"none\" }}\n      />\n    </label>\n  );\n};\n","import \"./Message.css\";\nimport React from \"react\";\nimport blankProfile from \"./assets/profile.png\";\nimport { EditableText } from \"./EditableText\";\nimport { EditableImage } from \"./EditableImage\";\n\nexport interface MessageData {\n  id: string;\n  author: string;\n  content: string;\n  timestamp: string;\n  avatar?: string;\n}\n\nexport interface MessageProps {\n  message: MessageData;\n  disabled?: boolean;\n  onChange: (message: MessageData) => void;\n  onRemove: () => void;\n  onAppend: () => void;\n}\n\nexport const Message: React.FC<MessageProps> = (props) => {\n  const { message, disabled, onChange, onRemove, onAppend } = props;\n\n  return (\n    <div className=\"Message\">\n      <EditableImage\n        alt={message.author}\n        disabled={disabled}\n        value={message.avatar ?? blankProfile}\n        onChange={(avatar) => onChange({ ...message, avatar })}\n        className=\"Message__avatar\"\n      />\n\n      <div className=\"Message__body\">\n        <div className=\"Message__title\">\n          <EditableText\n            disabled={disabled}\n            value={message.author}\n            onChange={(author) => onChange({ ...message, author })}\n            className=\"Message__author\"\n          />\n          <EditableText\n            disabled={disabled}\n            value={message.timestamp}\n            onChange={(timestamp) => onChange({ ...message, timestamp })}\n            className=\"Message__timestamp\"\n          />\n        </div>\n\n        <div className=\"Message__content\">\n          <EditableText\n            disabled={disabled}\n            value={message.content}\n            onChange={(content) => onChange({ ...message, content })}\n          />\n        </div>\n\n        {!disabled && (\n          <div className=\"Message__actions\">\n            <button type=\"button\" onClick={onAppend}>\n              Append\n            </button>\n            <button type=\"button\" onClick={onRemove}>\n              Remove\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { Message, MessageData } from \"./Message\";\nimport { format } from \"date-fns\";\n\nfunction generateId(): string {\n  return Math.random().toString(36).substr(2);\n}\n\nfunction getTime(): string {\n  return format(new Date(), \"h:mm a\");\n}\n\nfunction cloneMessage(message: MessageData): MessageData {\n  return { ...message, id: generateId() };\n}\n\nconst initialMessage: MessageData = {\n  id: generateId(),\n  author: \"John Doe\",\n  timestamp: getTime(),\n  content: \"This is a sample message.\",\n};\n\nexport const App = () => {\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [messages, setMessages] = useState<MessageData[]>([initialMessage]);\n\n  const updateMessage = React.useCallback((update: MessageData) => {\n    setMessages((messages) =>\n      messages.map((message) => (message.id === update.id ? update : message))\n    );\n  }, []);\n\n  const removeMessage = React.useCallback((id: string) => {\n    setMessages((messages) => messages.filter((m) => m.id !== id));\n  }, []);\n\n  const appendMessage = React.useCallback((message: MessageData) => {\n    setMessages((messages) => messages.concat([cloneMessage(message)]));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__toolbar\">\n        <button type=\"button\" onClick={() => setDisabled((value) => !value)}>\n          Toggle Editing\n        </button>\n      </div>\n\n      <div className=\"App__conversation\">\n        {messages.map((message) => (\n          <Message\n            key={message.id}\n            disabled={disabled}\n            message={message}\n            onChange={updateMessage}\n            onRemove={() => removeMessage(message.id)}\n            onAppend={() => appendMessage(message)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}